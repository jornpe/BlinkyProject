@inject IConfiguration Configuration
@inject IotDevicesService IotDeviceService
@inject DeviceTwinService DeviceTwinService
@inject ILogger<Index> Logger
@inject ServiceBusClient ServiceBusClient


@page "/"
@using Azure.Messaging.ServiceBus
@using WebApp.Infrastructure
@using WebApp.Services
@using System.Text.Json

<PageTitle>Index</PageTitle>

<h1>Welcome to Blinkey project</h1>

<div class="row px-3">
    <div class="col-md-5 p-3">
        <Radzen.Blazor.RadzenCard>
            <h3 class="mb-2">Connection configuration </h3>
            <p1>App configuration URL set to: <b>@appConfigUrl</b></p1>
            <p1>IOT hostname is set to: <b>@iotHubHostname</b></p1>
            <p1>Service bus hostname is set to: <b>@serviceBusHostname</b></p1>
            <p1>Number of devices: <b>@numberOfDevices</b></p1>
        </Radzen.Blazor.RadzenCard>
    </div>
</div>

<RadzenDataGrid @ref="devicesGrid" Data="iotDevices" TItem="DeviceTwin" AllowSorting="true" AllowPaging="true" PageSize="5">
    <Columns>

        <RadzenDataGridColumn Width="50px" TItem="DeviceTwin" Title="#" Filterable="false" Sortable="true" TextAlign="TextAlign.Center">
            <Template Context="data">
                @(iotDevices?.IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="DeviceTwin" Property="Twin.DeviceId" Title="Device Id"/>
        
        <RadzenDataGridColumn TItem="DeviceTwin" Property="Color" Title="Color">
            <Template Context="deviceTwin">

                <RadzenColorPicker @bind-Value="@deviceTwin.ColorPickerColorBinding" Change="@(color => OnColorChanged(deviceTwin.Twin.DeviceId, color))" ShowButton="true"/>
                <RadzenLabel Text="@deviceTwin.Color.ToString()" Component="HSV" Style="margin-left: 8px; margin-right: 32px; vertical-align: super;" />

            </Template>
        </RadzenDataGridColumn>
        
        
        <RadzenDataGridColumn TItem="DeviceTwin" Property="SensorData.Temperature" Title="Temperature">
            <Template Context="device">
                @if (device.SensorData != null)
                {
                    @($"{Math.Round(device.SensorData.Temperature, 2)}°C")
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DeviceTwin" Property="SensorData.Humidity" Title="Humidity">
            <Template Context="device">
                @if (device.SensorData != null)
                {
                    @($"{Math.Round(device.SensorData.Humidity, 2)}%")
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DeviceTwin" Property="SensorData.Time" Title="Time on sensor reading"/>

    </Columns>
</RadzenDataGrid>

@code
{
    string iotHubHostname = "Default Value";
    string serviceBusHostname = "Default Value";
    string serviceBusQueueName = "";
    string appConfigUrl = "";
    int numberOfDevices;

    RadzenDataGrid<DeviceTwin> devicesGrid = new();

    List<DeviceTwin>? iotDevices;


    protected override void OnInitialized()
    {
        iotHubHostname = Configuration["Blinkey:IotHubOptions:HostName"];
        appConfigUrl = Configuration["AppConfig:Endpoint"];
        serviceBusHostname = Configuration["Blinkey:ServiceBus:HostName"];
        serviceBusQueueName = Configuration["Blinkey:ServiceBus:QueueName"];

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            iotDevices = new List<DeviceTwin>();

            try
            {
                foreach (var twin in await IotDeviceService.GetTwinsAsync())
                {
                    iotDevices.Add(new DeviceTwin(twin));
                }

                numberOfDevices = iotDevices.Count;

                StateHasChanged();
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Exception thrown on initializing color picker page");
            }

            
            var processor = ServiceBusClient.CreateProcessor(serviceBusQueueName);
            processor.ProcessMessageAsync += OnMessageReceivedAsync;
            processor.ProcessErrorAsync += OnErrorReceivedAsync;
            await processor.StartProcessingAsync();

        }
    }

    private async Task OnErrorReceivedAsync(ProcessErrorEventArgs arg)
    {
        await InvokeAsync(() => Logger.LogError(arg.Exception, "Exception thrown on receiving sensor data"));
    }

    private async Task OnMessageReceivedAsync(ProcessMessageEventArgs arg)
    {
        TempSensorDto? sensorData;
        try
        {
            sensorData = JsonSerializer.Deserialize<TempSensorDto>(arg.Message.Body.ToString());

            if (iotDevices != null)
            {
                iotDevices.First(d => d.Twin.DeviceId == sensorData?.DeviceId).SensorData = sensorData;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Exception thrown on deserializing sensor data");
        }
        finally
        {
            await arg.CompleteMessageAsync(arg.Message);
        }
        

    }

    private async Task OnColorChanged(string deviceId, string newColor)
    {
        var rgb = newColor.Split('(', ')')[1].Split(',');

        var device = iotDevices?.First(d => d.Twin.DeviceId == deviceId);

        if (device is null)
        {
            Logger.LogWarning("There is no device with id: {deviceId} to send the color update too!", deviceId);
            return;
        }

        device.Color.Red = int.Parse(rgb[0]);
        device.Color.Green = int.Parse(rgb[1]);
        device.Color.Blue = int.Parse(rgb[2]);

        try
        {
            await DeviceTwinService.SendCouldToDeviceMessage(device.Color, device.Twin.DeviceId);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Exception thrown on changing the color of an device");
        }
    }
}
