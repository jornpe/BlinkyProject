@page "/colorpicker"

@using WebApp.Messages
@using WebApp.Services
@inject DeviceTwinService deviceTwinService
@inject IotDevicesService iotDeviceService
@inject ILogger<ColorPicker> logger
@inject IJSRuntime JsRuntime

<PageTitle>colorPicker</PageTitle>

<h3>Color Picker tool</h3>

@if (devices is not null)
{
    <ul>
        @foreach (var device in devices)
        {
            <li>@device</li>
        }
    </ul>
}

<div class="col-6 text-left align-middle pt-4 pl-5">
    <h4 class="my-4">Choose T-Shirt color</h4>
        <RadzenCard Class="mx-auto d-flex" Style="width: fit-content;">
            <div class="d-flex">
                <RadzenColorPicker @bind-Value=@color Change=@OnColorChanged ShowButton=true/>
                <RadzenLabel Text=@color Component="HSV" Style="margin-left: 8px; margin-right: 32px; vertical-align: middle;" />
            </div>
        </RadzenCard>
</div>

<p>@errorMsg</p>
<p>@stackTrace</p>


@code {
    string color = "";

    string errorMsg = "";
    string stackTrace = "";

    List<string>? devices;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            devices = await iotDeviceService.GetDevicesIdsAsync();
        }
        catch (Exception e)
        {
            errorMsg = e.Message;
            stackTrace = e.StackTrace + e.InnerException?.StackTrace;
            await JsRuntime.InvokeAsync<string>("console.log", e.StackTrace);
        }
    }

    async Task OnColorChanged(string value)
    {
        var colorMessage = new ColorUpdateMessage { Color = value };

        try
        {
            await deviceTwinService.SendCouldToDeviceMessage(colorMessage);
        }
        catch (Exception e)
        {
            errorMsg = e.Message;
            stackTrace = e.StackTrace + e.InnerException?.StackTrace;
            await JsRuntime.InvokeAsync<string>("console.log", e.StackTrace);
        }
    }
}
